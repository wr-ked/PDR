// Generated by gencpp from file primer_paquete/miMensaje.msg
// DO NOT EDIT!


#ifndef PRIMER_PAQUETE_MESSAGE_MIMENSAJE_H
#define PRIMER_PAQUETE_MESSAGE_MIMENSAJE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace primer_paquete
{
template <class ContainerAllocator>
struct miMensaje_
{
  typedef miMensaje_<ContainerAllocator> Type;

  miMensaje_()
    : x(0)
    , y(0)  {
    }
  miMensaje_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)  {
  (void)_alloc;
    }



   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(nombre)
  #undef nombre
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> nombre;

  typedef boost::shared_ptr< ::primer_paquete::miMensaje_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::primer_paquete::miMensaje_<ContainerAllocator> const> ConstPtr;

}; // struct miMensaje_

typedef ::primer_paquete::miMensaje_<std::allocator<void> > miMensaje;

typedef boost::shared_ptr< ::primer_paquete::miMensaje > miMensajePtr;
typedef boost::shared_ptr< ::primer_paquete::miMensaje const> miMensajeConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      miMensaje_<ContainerAllocator>::nombre =
        
          "Hugo"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::primer_paquete::miMensaje_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::primer_paquete::miMensaje_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::primer_paquete::miMensaje_<ContainerAllocator1> & lhs, const ::primer_paquete::miMensaje_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::primer_paquete::miMensaje_<ContainerAllocator1> & lhs, const ::primer_paquete::miMensaje_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace primer_paquete

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::primer_paquete::miMensaje_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::primer_paquete::miMensaje_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::primer_paquete::miMensaje_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::primer_paquete::miMensaje_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::primer_paquete::miMensaje_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::primer_paquete::miMensaje_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::primer_paquete::miMensaje_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38d0bd1746ccf6c46eff56e210e6a645";
  }

  static const char* value(const ::primer_paquete::miMensaje_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38d0bd1746ccf6c4ULL;
  static const uint64_t static_value2 = 0x6eff56e210e6a645ULL;
};

template<class ContainerAllocator>
struct DataType< ::primer_paquete::miMensaje_<ContainerAllocator> >
{
  static const char* value()
  {
    return "primer_paquete/miMensaje";
  }

  static const char* value(const ::primer_paquete::miMensaje_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::primer_paquete::miMensaje_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 x\n"
"int32 y\n"
"string nombre=Hugo\n"
;
  }

  static const char* value(const ::primer_paquete::miMensaje_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::primer_paquete::miMensaje_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct miMensaje_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::primer_paquete::miMensaje_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::primer_paquete::miMensaje_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRIMER_PAQUETE_MESSAGE_MIMENSAJE_H
